/**
 * @file misc.cpp
 */

/*
 * The following license applies to the code in this file:
 *
 * **************************************************************************
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * **************************************************************************
 *
 * Author: Dr. RÃ¼diger Berlich of Gemfony scientific UG (haftungsbeschraenkt)
 * See http://www.gemfony.eu for further information.
 *
 * This code is based on the Beast Websocket library by Vinnie Falco.
 */

#include "misc.hpp"

/******************************************************************************************/

void set_transfer_mode(boost::beast::websocket::stream<boost::beast::tcp_stream> &ws) {
    // We need to tell Beast whether we intend to send
    // text- or binary-messages. Within this evaluator,
    // this is handled through a #define of BINARYARCHIVE,
    // XMLARCHIVE or TEXTARCHIVE (via Boost.Serialization)
    // in the CMakeLists.txt .
#if defined(BINARYARCHIVE)
    ws.binary(true);
    std::cout << "Set Beast transfer mode to BINARY" << std::endl;
#elif defined(XMLARCHIVE)
    ws.text(true);
    std::cout << "Set Beast transfer mode to TEXT/XML" << std::endl;
#elif defined(TEXTARCHIVE)
    ws.text(true);
    std::cout << "Set Beast transfer mode to TEXT/TEXT" << std::endl;
#else
    ws.text(true);
    std::cout << "Set Beast transfer mode to TEXT/OTHER" << std::endl;
#endif
}

/******************************************************************************************/

std::ostream &operator<<(std::ostream &o, const payload_command &ps) {
    auto tmp = static_cast<ENUMBASETYPE>(ps);
    o << tmp;
    return o;
}

/******************************************************************************************/

std::istream &operator>>(std::istream &i, payload_command &ps) {
    ENUMBASETYPE tmp;
    i >> tmp;

#ifdef DEBUG
    ps = boost::numeric_cast<payload_command>(tmp);
#else
    ps = static_cast<payload_command>(tmp);
#endif /* DEBUG */

    return i;
}

/******************************************************************************************/

std::ostream &operator<<(std::ostream &o, const ping_state &ps) {
    auto tmp = static_cast<ENUMBASETYPE>(ps);
    o << tmp;
    return o;
}

/******************************************************************************************/

std::istream &operator>>(std::istream &i, ping_state &ps) {
    ENUMBASETYPE tmp;
    i >> tmp;

#ifdef DEBUG
    ps = boost::numeric_cast<ping_state>(tmp);
#else
    ps = static_cast<ping_state>(tmp);
#endif /* DEBUG */

    return i;
}

/******************************************************************************************/

std::ostream &operator<<(std::ostream &o, const payload_type &am) {
    auto tmp = static_cast<ENUMBASETYPE>(am);
    o << tmp;
    return o;
}

/******************************************************************************************/

std::istream &operator>>(std::istream &i, payload_type &am) {
    ENUMBASETYPE tmp;
    i >> tmp;

#ifdef DEBUG
    am = boost::numeric_cast<payload_type>(tmp);
#else
    am = static_cast<payload_type>(tmp);
#endif /* DEBUG */

    return i;
}

/******************************************************************************************/

/**
 * Creation of a fixed-width command-string to be transmitted between client and server
 */
std::string text_command_string(const std::string &cmd, std::size_t command_length) {
#ifdef DEBUG
    if(cmd.size() > command_length) {
        throw std::runtime_error(
            "text_command_string: command_length is too large: " + std::to_string(cmd.size()) + " Expected " + std::to_string(command_length)
        );
    }
#endif

    std::ostringstream command_stream;
    command_stream << std::setw(boost::numeric_cast<int>(command_length)) << cmd;
    return command_stream.str();
}

/******************************************************************************************/